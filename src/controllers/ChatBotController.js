const { OpenAI } = require("openai");
const Food = require("../models/Food");
require("dotenv").config();

const getAllCalories = async () => {
  try {
    const foods = await Food.find({}); // l·∫•y to√†n b·ªô object
    if (!foods || foods.length === 0) {
      return [];
    }
    return foods; // m·∫£ng object ƒë·∫ßy ƒë·ªß
  } catch (error) {
    console.error("Error in getAllFoods:", error);
    return [];
  }
};

// l·∫•y calo ti·ªám c·∫≠n
function findClosestSum(objs, target, mode = "gte") {
  const arr = objs
    .map((o, i) => ({
      ...(o.toObject?.() ?? o),
      calo: Math.round(Number(o.calo) || 0),
      idx: i,
    }))
    .filter((o) => o.calo > 0);

  if (arr.length === 0) return { chosen: [], sum: 0 };
  if (target <= 0 && mode === "gte") return { chosen: [], sum: 0 };

  const total = arr.reduce((a, b) => a + b.calo, 0);

  // üîπ th√™m case all
  if (mode === "all") {
    return { chosen: arr, sum: total };
  }

  if (mode === "gte") {
    if (total < target) return { chosen: arr, sum: total };
  } else if (mode === "lte") {
    if (total <= target) return { chosen: arr, sum: total };
  }

  const dp = Array(total + 1).fill(false);
  const prev = Array(total + 1).fill(-1);
  const used = Array(total + 1).fill(-1);

  dp[0] = true;

  for (let i = 0; i < arr.length; i++) {
    const v = arr[i].calo;
    for (let s = total; s >= v; s--) {
      if (!dp[s] && dp[s - v]) {
        dp[s] = true;
        prev[s] = s - v;
        used[s] = i;
      }
    }
  }

  let best = -1;
  if (mode === "gte") {
    for (let s = target; s <= total; s++) {
      if (dp[s]) {
        best = s;
        break;
      }
    }
  } else if (mode === "lte") {
    for (let s = target; s >= 0; s--) {
      if (dp[s]) {
        best = s;
        break;
      }
    }
  }

  if (best === -1) return { chosen: [], sum: 0 };

  const chosen = [];
  let s = best;
  while (s > 0) {
    const idx = used[s];
    chosen.push(arr[idx]);
    s = prev[s];
  }

  return { chosen, sum: best };
}

const getNewFoods = async (currentCalo, check) => {
  try {
    const foods = await Food.find({});
    if (!foods || foods.length === 0) {
      return { chosen: [], sum: 0 };
    }

    let mode = "all";
    if (check === true) mode = "gte";
    else if (check === false) mode = "lte";

    return findClosestSum(foods, currentCalo, mode);
  } catch (error) {
    console.error("Error in getNewFoods:", error);
    return { chosen: [], sum: 0 };
  }
};

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const trendFoodGPTResponse = async (req, res) => {
  try {
    const { min, max, trend, stdDev, currentCalo } = req.body;

    if (!currentCalo && !stdDev) {
      return res.status(400).json({ error: "Missing message" });
    }

    let AllCalories = await getAllCalories();

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: `
            B·∫°n l√† 1 m√°y ph√¢n t√≠ch d·ªØ li·ªáu dinh d∆∞·ª°ng sao cho k·∫øt qu·∫£ tr·∫£ v·ªÅ n·∫±m trong kho·∫£ng (min) v√† (max).
            - N·∫øu stdDev < 0.3 th√¨ gi·ªØ nguy√™n calo (currentCalo).
            - N·∫øu stdDev >= 0.3 v√† trend > 0.3 th√¨ gi·∫£m calo (currentCalo).
            - N·∫øu stdDev >= 0.3 v√† trend < -0.3 th√¨ tƒÉng calo (currentCalo).
            Danh s√°ch calo tham chi·∫øu: ${JSON.stringify(AllCalories)}.
            b·∫°n ch·ªâ c·∫ßn tr·∫£ l·ªùi l√† "tƒÉng" hay "gi·∫£m" calo.
          `,
        },
        {
          role: "user",
          content: `Ph√¢n t√≠ch v·ªõi input: min=${min}, max=${max}, trend=${trend}, stdDev=${stdDev}, currentCalo=${currentCalo}`,
        },
      ],
    });

    const reply = response.choices[0].message.content;

    // l·∫•y m·∫£ng m√≥n ƒÉn
    let result;
    if (reply.includes("tƒÉng")) {
      result = await getNewFoods(currentCalo, true);
    } else if (reply.includes("gi·∫£m")) {
      result = await getNewFoods(currentCalo, false);
    } else {
      result = await getNewFoods(currentCalo);
    }

    res.json({ result });
  } catch (err) {
    console.error("Error in chatGPTResponse controller:", err);
    return res.status(500).json({
      EM: "Error chatGPTResponse",
      EC: -1,
      DT: "",
    });
  }
};

module.exports = {
  trendFoodGPTResponse,
};
